/**
 * Laravel
 * Joy VoyagerApi module adds REST Api end points to Voyager with Passport and Swagger support https://github.com/rxcod9/joy-voyager-api.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CategoriesService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * categories create
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesCreate(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesCreate(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesCreate(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesCreate(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/categories/create`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories delete
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesDelete(id: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesDelete(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesDelete(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesDelete(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categoriesDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/categories/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories edit
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesEdit(id: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesEdit(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesEdit(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesEdit(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categoriesEdit.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/categories/${encodeURIComponent(String(id))}/edit`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories index
     * 
     * @param q Global search
     * @param page 
     * @param length 
     * @param orderBy Sort by column
     * @param sortOrder Sort by direction
     * @param filtersOrder 
     * @param filtersName 
     * @param filtersSlug 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesIndex(q?: any, page?: any, length?: any, orderBy?: any, sortOrder?: any, filtersOrder?: any, filtersName?: any, filtersSlug?: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesIndex(q?: any, page?: any, length?: any, orderBy?: any, sortOrder?: any, filtersOrder?: any, filtersName?: any, filtersSlug?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesIndex(q?: any, page?: any, length?: any, orderBy?: any, sortOrder?: any, filtersOrder?: any, filtersName?: any, filtersSlug?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesIndex(q?: any, page?: any, length?: any, orderBy?: any, sortOrder?: any, filtersOrder?: any, filtersName?: any, filtersSlug?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined && q !== null) {
            queryParameters = queryParameters.set('q', <any>q);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (length !== undefined && length !== null) {
            queryParameters = queryParameters.set('length', <any>length);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('order_by', <any>orderBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sort_order', <any>sortOrder);
        }
        if (filtersOrder !== undefined && filtersOrder !== null) {
            queryParameters = queryParameters.set('filters[order]', <any>filtersOrder);
        }
        if (filtersName !== undefined && filtersName !== null) {
            queryParameters = queryParameters.set('filters[name]', <any>filtersName);
        }
        if (filtersSlug !== undefined && filtersSlug !== null) {
            queryParameters = queryParameters.set('filters[slug]', <any>filtersSlug);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/categories`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories relation
     * 
     * @param type 
     * @param method 
     * @param required 
     * @param page 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesRelation(type: any, method?: any, required?: any, page?: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesRelation(type: any, method?: any, required?: any, page?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesRelation(type: any, method?: any, required?: any, page?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesRelation(type: any, method?: any, required?: any, page?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling categoriesRelation.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (required !== undefined && required !== null) {
            queryParameters = queryParameters.set('required', <any>required);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/categories/relation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories restore
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesRestore(id: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesRestore(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesRestore(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesRestore(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categoriesRestore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/categories/${encodeURIComponent(String(id))}/restore`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories show
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesShow(id: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesShow(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesShow(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesShow(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categoriesShow.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/categories/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories single update
     * 
     * @param id 
     * @param field 
     * @param fields 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesSingleUpdate(id: any, field: any, fields?: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesSingleUpdate(id: any, field: any, fields?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesSingleUpdate(id: any, field: any, fields?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesSingleUpdate(id: any, field: any, fields?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categoriesSingleUpdate.');
        }

        if (field === null || field === undefined) {
            throw new Error('Required parameter field was null or undefined when calling categoriesSingleUpdate.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fields !== undefined && fields !== null) {
            queryParameters = queryParameters.set('fields[]', <any>fields);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/categories/${encodeURIComponent(String(id))}/single/${encodeURIComponent(String(field))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories store
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesStore(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesStore(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesStore(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesStore(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/categories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categories update
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriesUpdate(id: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categoriesUpdate(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categoriesUpdate(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categoriesUpdate(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categoriesUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/categories/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
